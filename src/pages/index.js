import Head from "next/head";
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { loginProcess } from "../api";
import { useRouter } from "next/router";
import { checkSignedIn } from "../redux/slice/authenticaitonSlice";
import { Alert } from "antd";
import Login from "../components/Login";

export default function Home() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const dispatch = useDispatch();
  const { isLoading, status } = useSelector((state) => state.authentication);
  const router = useRouter();

  const handleLogin = () => {
    dispatch(loginProcess({ email, password }))
      .then((result) => {
        if (result.payload && result.payload.status === "success") {
          dispatch(checkSignedIn("1"));
          router.push("/home");
        } else {
          dispatch(checkSignedIn("0"));
          console.log(result.error.message);
          console.log(result.error.status, "aslbjklnajksdlnasdnlaslndb");
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  return (
    <>
      <Head>
        <title>Pengona Software</title>
        <meta name="description" content="Generated by Pengona" />
      </Head>
      <main className="w-full flex flex-col  h-screen">
        <Login />

        {/* <div className="flex justify-center items-center w-full">
          {status && status === "error" && (
            <Alert
              message="Error"
              description="E-posta veya şifre bilgileri yanlış"
              type="error"
              showIcon
              closable
            />
          )}
          <div>
            <h2>Login</h2>
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <button onClick={handleLogin} disabled={isLoading}>
              {isLoading ? "Loading..." : "Login"}
            </button>
          </div>
        </div> */}
      </main>
    </>
  );
}
